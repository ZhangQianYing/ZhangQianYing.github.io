{"meta":{"title":"昵称已注释","subtitle":"一个爱拼搏的前端开发者","description":"一个个人博客","author":"昵称已注释","url":"http://iqqian.com","root":"/"},"pages":[{"title":"404 Not Found","date":"2021-12-16T07:03:02.505Z","updated":"2021-12-16T07:03:02.505Z","comments":true,"path":"404.html","permalink":"http://iqqian.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2021-12-16T07:03:02.507Z","updated":"2021-12-16T07:03:02.507Z","comments":true,"path":"about/index.html","permalink":"http://iqqian.com/about/index.html","excerpt":"","text":"真（ま）白（しろ） 对话中..."},{"title":"留言","date":"2021-12-16T07:03:02.508Z","updated":"2021-12-16T07:03:02.508Z","comments":true,"path":"message/index.html","permalink":"http://iqqian.com/message/index.html","excerpt":"","text":"一言 挑选中... 有什么想说的，有什么想问，就在下方留言吧，收到我会第一时间回复！请尽情灌水吧！😉 $.get(\"https://v1.hitokoto.cn?c=i&c=j\", function (data, status) { if (status == 'success') { $('#poem').html(data.hitokoto); if (data.from_who != null) { $('#info').html(data.from_who + \" · \" + \"《 \" + data.from + \" 》\"); } else { $('#info').html(data.from); } } else { $('#poem').html(\"获取出错啦\"); } }); .poem-wrap { position: relative; width: 730px; max-width: 80%; border: 2px solid #797979; border-top: 0; text-align: center; margin: 80px auto; } .poem-wrap h1 { position: relative; margin-top: -20px; display: inline-block; letter-spacing: 4px; color: #797979; border-bottom: none; } .poem-wrap p { width: 70%; margin: auto; line-height: 30px; color: #797979; } .poem-wrap p#poem { text-align: center; font-size: 25px; } .poem-wrap p#info { text-align: center; font-size: 15px; margin: 15px auto; } .poem-border { position: absolute; height: 2px; width: 27%; background-color: #797979; } .poem-right { right: 0; } .poem-left { left: 0; } @media (max-width: 685px) { .poem-border { width: 18%; } } @media (max-width: 500px) { .poem-wrap { margin-top: 60px; margin-bottom: 20px; border-top: 2px solid #797979; } .poem-wrap h1 { margin: 20px 6px; } .poem-border { display: none; } }"},{"title":"所有分类","date":"2021-12-16T07:03:02.508Z","updated":"2021-12-16T07:03:02.508Z","comments":true,"path":"categories/index.html","permalink":"http://iqqian.com/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2021-12-16T07:03:02.508Z","updated":"2021-12-16T07:03:02.508Z","comments":true,"path":"friends/index.html","permalink":"http://iqqian.com/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2021-12-16T07:03:02.509Z","updated":"2021-12-16T07:03:02.509Z","comments":true,"path":"mylist/index.html","permalink":"http://iqqian.com/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2021-12-16T07:03:02.509Z","updated":"2021-12-16T07:03:02.509Z","comments":true,"path":"tags/index.html","permalink":"http://iqqian.com/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2021-12-16T07:03:02.509Z","updated":"2021-12-16T07:03:02.509Z","comments":true,"path":"photo/index.html","permalink":"http://iqqian.com/photo/index.html","excerpt":"","text":"小姐姐生活无名 This is Tab 3."}],"posts":[{"title":"CSS八种让人眼前一亮的hover效果","slug":"2020-8-25","date":"2020-05-22T08:26:03.000Z","updated":"2021-12-16T07:03:02.506Z","comments":true,"path":"2020/05/22/2020-8-25/","link":"","permalink":"http://iqqian.com/2020/05/22/2020-8-25/","excerpt":"","text":"一、 发送效果 HTML &lt;div id=&quot;send-btn&quot;&gt; &lt;button&gt; // 这里是一个svg的占位 Send &lt;/button&gt; &lt;/div&gt; 复制代码 CSS #send-btn&amp;#123; display: flex; align-items: center; justify-content: center; height: 100vh; &amp;#125; button &amp;#123; background: #5f55af; border: 0; border-radius: 5px; padding: 10px 30px 10px 20px; color: white; text-transform: uppercase; font-weight: bold; &amp;#125; button svg &amp;#123; display: inline-block; vertical-align: middle; padding-right: 5px; &amp;#125; button:hover svg &amp;#123; animation: fly 2s ease 1; &amp;#125; @keyframes fly &amp;#123; 0% &amp;#123; transform: translateX(0%); &amp;#125; 50% &amp;#123; transform: translateX(300%); &amp;#125; 100% &amp;#123; transform: translateX(0); &amp;#125; &amp;#125; 复制代码 GIF图 二、霓虹效果 HTML &lt;div id=&quot;neon-btn&quot;&gt; &lt;button class=&quot;btn one&quot;&gt;Hover me&lt;/button&gt; &lt;button class=&quot;btn two&quot;&gt;Hover me&lt;/button&gt; &lt;button class=&quot;btn three&quot;&gt;Hover me&lt;/button&gt; &lt;/div&gt; 复制代码 CSS #neon-btn &amp;#123; display: flex; align-items: center; justify-content: space-around; height: 100vh; background: #031628; &amp;#125; .btn &amp;#123; border: 1px solid; background-color: transparent; text-transform: uppercase; font-size: 14px; padding: 10px 20px; font-weight: 300; &amp;#125; .one &amp;#123; color: #4cc9f0; &amp;#125; .two &amp;#123; color: #f038ff; &amp;#125; .three &amp;#123; color: #b9e769; &amp;#125; .btn:hover &amp;#123; color: white; border: 0; &amp;#125; .one:hover &amp;#123; background-color: #4cc9f0; -webkit-box-shadow: 10px 10px 99px 6px rgba(76,201,240,1); -moz-box-shadow: 10px 10px 99px 6px rgba(76,201,240,1); box-shadow: 10px 10px 99px 6px rgba(76,201,240,1); &amp;#125; .two:hover &amp;#123; background-color: #f038ff; -webkit-box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1); -moz-box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1); box-shadow: 10px 10px 99px 6px rgba(240, 56, 255, 1); &amp;#125; .three:hover &amp;#123; background-color: #b9e769; -webkit-box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1); -moz-box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1); box-shadow: 10px 10px 99px 6px rgba(185, 231, 105, 1); &amp;#125; 复制代码 GIF图 三、边框效果 HTML &lt;div id=&quot;draw-border&quot;&gt; &lt;button&gt;Hover me&lt;/button&gt; &lt;/div&gt; 复制代码 CSS #draw-border &amp;#123; display: flex; align-items: center; justify-content: center; height: 100vh; &amp;#125; button &amp;#123; border: 0; background: none; text-transform: uppercase; color: #4361ee; font-weight: bold; position: relative; outline: none; padding: 10px 20px; box-sizing: border-box; &amp;#125; button::before, button::after &amp;#123; box-sizing: inherit; position: absolute; content: &#39;&#39;; border: 2px solid transparent; width: 0; height: 0; &amp;#125; button::after &amp;#123; bottom: 0; right: 0; &amp;#125; button::before &amp;#123; top: 0; left: 0; &amp;#125; button:hover::before, button:hover::after &amp;#123; width: 100%; height: 100%; &amp;#125; button:hover::before &amp;#123; border-top-color: #4361ee; border-right-color: #4361ee; transition: width 0.3s ease-out, height 0.3s ease-out 0.3s; &amp;#125; button:hover::after &amp;#123; border-bottom-color: #4361ee; border-left-color: #4361ee; transition: border-color 0s ease-out 0.6s, width 0.3s ease-out 0.6s, height 0.3s ease-out 1s; &amp;#125; 复制代码 GIF图 四、圆形效果 HTML &lt;div id=&quot;circle-btn&quot;&gt; &lt;div class=&quot;btn-container&quot;&gt; // 这里有一个svg元素 &lt;button&gt;Hover me&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; 复制代码 CSS #circle-btn &amp;#123; display: flex; align-items: center; justify-content: center; height: 100vh; &amp;#125; .btn-container &amp;#123; position: relative; &amp;#125; button &amp;#123; border: 0; border-radius: 50px; color: white; background: #5f55af; padding: 15px 20px 16px 60px; text-transform: uppercase; background: linear-gradient(to right, #f72585 50%, #5f55af 50%); background-size: 200% 100%; background-position: right bottom; transition:all 2s ease; &amp;#125; svg &amp;#123; background: #f72585; padding: 8px; border-radius: 50%; position: absolute; left: 0; top: 0%; &amp;#125; button:hover &amp;#123; background-position: left bottom; &amp;#125; 复制代码 GIF图 五、圆角效果 HTML &lt;div id=&quot;border-btn&quot;&gt; &lt;button&gt;Hover me&lt;/button&gt; &lt;/div&gt; 复制代码 CSS #border-btn &amp;#123; display: flex; align-items: center; justify-content: center; height: 100vh; &amp;#125; button &amp;#123; border: 0; border-radius: 10px; background: #2ec4b6; text-transform: uppercase; color: white; font-size: 16px; font-weight: bold; padding: 15px 30px; outline: none; position: relative; transition: border-radius 3s; -webkit-transition: border-radius 3s; &amp;#125; button:hover &amp;#123; border-bottom-right-radius: 50px; border-top-left-radius: 50px; border-bottom-left-radius: 10px; border-top-right-radius: 10px; &amp;#125; 复制代码 GIF图 六、冰冻效果 HTML &lt;div id=&quot;frozen-btn&quot;&gt; &lt;button class=&quot;green&quot;&gt;Hover me&lt;/button&gt; &lt;button class=&quot;purple&quot;&gt;Hover me&lt;/button&gt; &lt;/div&gt; 复制代码 CSS #frozen-btn &amp;#123; display: flex; align-items: center; justify-content: center; height: 100vh; &amp;#125; button &amp;#123; border: 0; margin: 20px; text-transform: uppercase; font-size: 20px; font-weight: bold; padding: 15px 50px; border-radius: 50px; color: white; outline: none; position: relative; &amp;#125; button:before&amp;#123; content: &#39;&#39;; display: block; background: linear-gradient(to left, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.4) 50%); background-size: 210% 100%; background-position: right bottom; height: 100%; width: 100%; position: absolute; top: 0; bottom:0; right:0; left: 0; border-radius: 50px; transition: all 1s; -webkit-transition: all 1s; &amp;#125; .green &amp;#123; background-image: linear-gradient(to right, #25aae1, #40e495); box-shadow: 0 4px 15px 0 rgba(49, 196, 190, 0.75); &amp;#125; .purple &amp;#123; background-image: linear-gradient(to right, #6253e1, #852D91); box-shadow: 0 4px 15px 0 rgba(236, 116, 149, 0.75); &amp;#125; .purple:hover:before &amp;#123; background-position: left bottom; &amp;#125; .green:hover:before &amp;#123; background-position: left bottom; &amp;#125; 复制代码 GIF图 七、闪亮效果 HTML &lt;div id=&quot;shiny-shadow&quot;&gt; &lt;button&gt;&lt;span&gt;Hover me&lt;/span&gt;&lt;/button&gt; &lt;/div&gt; 复制代码 CSS #shiny-shadow &amp;#123; display: flex; align-items: center; justify-content: center; height: 100vh; background: #1c2541; &amp;#125; button &amp;#123; border: 2px solid white; background: transparent; text-transform: uppercase; color: white; padding: 15px 50px; outline: none; overflow: hidden; position: relative; &amp;#125; span &amp;#123; z-index: 20; &amp;#125; button:after &amp;#123; content: &#39;&#39;; display: block; position: absolute; top: -36px; left: -100px; background: white; width: 50px; height: 125px; opacity: 20%; transform: rotate(-45deg); &amp;#125; button:hover:after &amp;#123; left: 120%; transition: all 600ms cubic-bezier(0.3, 1, 0.2, 1); -webkit-transition: all 600ms cubic-bezier(0.3, 1, 0.2, 1); &amp;#125; 复制代码 GIF图 八、加载效果 HTML &lt;div id=&quot;loading-btn&quot;&gt; &lt;button&gt;&lt;span&gt;Hover me&lt;/span&gt;&lt;/button&gt; &lt;/div&gt; 复制代码 CSS #loading-btn &amp;#123; display: flex; align-items: center; justify-content: center; height: 100vh; &amp;#125; button &amp;#123; background: transparent; border: 0; border-radius: 0; text-transform: uppercase; font-weight: bold; font-size: 20px; padding: 15px 50px; position: relative; &amp;#125; button:before &amp;#123; transition: all 0.8s cubic-bezier(0.7, -0.5, 0.2, 2); content: &#39;&#39;; width: 1%; height: 100%; background: #ff5964; position: absolute; top: 0; left: 0; &amp;#125; button span &amp;#123; mix-blend-mode: darken; &amp;#125; button:hover:before &amp;#123; background: #ff5964; width: 100%; &amp;#125; 复制代码 GIF图 总结 巧用伪元素:before、:after等，让你的页面按钮眼前一亮。","categories":[{"name":"css","slug":"css","permalink":"http://iqqian.com/categories/css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://iqqian.com/tags/css/"}]},{"title":"Es6中 Set 用法回顾","slug":"es6","date":"2020-05-22T08:26:03.000Z","updated":"2021-12-16T07:03:02.506Z","comments":true,"path":"2020/05/22/es6/","link":"","permalink":"http://iqqian.com/2020/05/22/es6/","excerpt":"","text":"概述 Set是一个新的数据结构，和其他语言的特性差不多，当然，作为js中的Set，他还是有一些属于js的特点。 初始化 初始化一个Set有一个可选的参数，这个参数必须是一个可迭代的对象，可迭代对象包括String、Array、Array-Like obejct(Arguments、NodeList)、Typped Array、Set、Map和用户定义的可迭代对象 new Set([iterable]); 字符串new Set(&#39;1234&#39;) // Set(4) &amp;#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;&amp;#125; 数组new Set([1,2,3,4]) // Set(4) &amp;#123;1, 2, 3, 4&amp;#125; arguments function sum()&amp;#123; return new Set(arguments) &amp;#125; sum(1,2,3,4) // Set(4) &amp;#123;1, 2, 3, 4&amp;#125; Setnew Set(new Set([1,2,3,4])) // Set(4) &amp;#123;1, 2, 3, 4&amp;#125; 添加值 初始化一个Set之后，可以继续往里面添加值 let set=new Set() set.add(1) set.add(1) set.add(1) console.log(set) // Set(1) &amp;#123;1&amp;#125; 借用这个特性可以搞很多事，比如过滤重复值 new Set([1,1,2,3]) // Set(3)&amp;#123;1,2,3&amp;#125; 但是注意，两个相同的对象字面量是不同的对象，具有不同的引用，所以Set是无法将两个不同引用的对象标记为同一个的，即使他们看过去是一样的 let a=&amp;#123;num:1&amp;#125; let b=&amp;#123;num:1&amp;#125; console.log(a===b) //false new Set(a, b)// Set(2)&amp;#123;&amp;#123;num:1&amp;#125;,&amp;#123;num:2&amp;#125;&amp;#125; let c=a console.log(c===a)//true new Set(a,c)// Set(1)&amp;#123;&amp;#123;num:1&amp;#125;&amp;#125; 判断是否包含let set=new Set([1,2,3]) set.has(1) // true set.has(4) //false 获取数量let set=new Set([1,2,3]) set.size //3 删除let set=new Set([1,2,3]) set.delete(1)// true set.delete(1)// false 清空let set=new Set([1,2,3]) set.clear() console.log(set) // Set(0)&amp;#123;&amp;#125; 遍历let set=new Set([1,2,3]) set.forEach((s)=&gt;&amp;#123;console.log(s)&amp;#125;) // 1 // 2 // 3 获取迭代器let set=new Set([1,2,3]) let entries=set.entries() console.log(entries.next().value) // [1,1] console.log(entries.next().value) // [2,2] console.log(entries.next().value) // [3,3] console.log(entries.next().value) // undefined for(let item of set)&amp;#123; console.log(item) &amp;#125; // 1 // 2 // 3 获取键迭代器let set=new Set([1,2,3]) let keys=set.keys() console.log(keys.next().value) // 1 console.log(keys.next().value) // 2 console.log(keys.next().value) // 3 console.log(keys.next().value) // undefined for(let &amp;#123;key&amp;#125; of set)&amp;#123; console.log(key) &amp;#125; // 1 // 2 // 3 获取值迭代器let set=new Set([1,2,3]) let values=set.values() console.log(values.next().value) // 1 console.log(values.next().value) // 2 console.log(values.next().value) // 3 console.log(values.next().value) // undefined for(let &amp;#123;value&amp;#125; of set)&amp;#123; console.log(value) &amp;#125; // 1 // 2 // 3 以上就是ES6中Set的用法介绍（代码示例）的详细内容 ,更多的内容后续更新","categories":[{"name":"js","slug":"js","permalink":"http://iqqian.com/categories/js/"},{"name":"es6","slug":"js/es6","permalink":"http://iqqian.com/categories/js/es6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"http://iqqian.com/tags/es6/"},{"name":"前端","slug":"前端","permalink":"http://iqqian.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"js","slug":"js","permalink":"http://iqqian.com/tags/js/"}]},{"title":"git 从入门到放弃","slug":"git","date":"2020-05-22T08:26:03.000Z","updated":"2021-12-16T07:03:02.506Z","comments":true,"path":"2020/05/22/git/","link":"","permalink":"http://iqqian.com/2020/05/22/git/","excerpt":"","text":"git 重新绑定远程仓库git remote rm origin git remote add origin 你的新远程仓库地址 git 推送本地所有的分支git push --all origin -u git 创建基础文件 .gitgit init git 提交的缓存区git add . 把修改的文件和新文件提交到暂存区，但不会提交被删除的文件 git add -u：不会提交新的文件 git add -A：提交所有变化，是以上两个命令集合 git 推送到远程分支git push origin master 或者 git push origin 分支名 git 拉取远程分支git pull // 可拆分为两步 git fetch origin 分支名 // 远程仓库到本地版本库 git merge origin/分支名 // 版本库到工作区 // 我比较喜欢git pull --rebase git log 查看提交的日志git log 查看提交的记录 git reflog 查看详细日志 git log --graph 图形展示历史记录 git reset 版本后退git reset --hard 提交记录的版本号 后退回退都可以 git cherry-pick 跨记录拿提交内容git cherry-pick 版本号 // 根据自己想拿的记录名，拿指定的记录 ，比如你版本后退了，新功能只有一项需要 可以通过这个把那一次的提交拿过来 git 稍微高级点操作git 分支操作git branch // 查看当前分支 git branch -r // 查看远程分支 git branch 分支名 git branch -D 删除分支 git checkout 分支名 // 切换到另一个分支，注意当前分支如果未提交的不能切换 git checkout -b 分支名 // 创建一个分支 并切换过去 git checkout -b 分支名 origin/分支名 // 切换一个分支并拉取远程当前分支的内容 注意： 一般创建切换分支，创建出来的分支是和当前分支内容一样，以创建时所在分支为模板创建 git 暂存区暂存区使用的条件： 1.当前内容未开发完毕，不想提交代码记录，并且需要切换到其他分支修改其他内容 2.已经开发过的内容，目前又不需要了，后期不确定使用不使用 git stash list // 查询当前暂存区所有记录 git stash save &quot;这里写你提交的内容注释，方便你记忆当时暂存的是什么内容&quot; git stash pop // 将你提交的暂存弹出来，默认最后一条，正常弹出后会删除，如果出现冲突，解决完不会删除这条暂存 git stash pop stash @&amp;#123;这里填数字&amp;#125; // 这里指弹出第几次的暂存记录‘ git stash drop stash @&amp;#123;数字&amp;#125; // 这里指丢弃第几次记录 git stash clear // 清空暂存 git show stash@&amp;#123;n&amp;#125; // 查看暂存的具体内容 git rebase 变基（重点）git rebase 分支名 // 将其他分支合并到当前分支，两个人的提交记录将会合并，可能会冲突，需要解决完继续合并，如果没有冲突就直接合并完成 git log 查看记录就可以了 git add . // 有冲突解决后操作然后执行 ，可能需要执行 git commit --amend 更新提交记录 注意： 如果中间出现无法继续合并可能会有多次冲突，当前冲突解决完不需要 git add. 而是继续执行 git rebase --continue 继续操作 git rebase --continue // 继续执行剩下为合并的 git rebase -- abort // 在未合并完成的时候可以退回到合并前的页面 // git 合并提交记录，让记录更加简洁，注意不是很熟练不要操作！不要操作 git rebase -i 以前提交的记录名 //将现在的提交到以前提交的中间部分一起合并 git rebase -i HEAD~数量 //从当前位置向前合并几次记录 改想合并的那一条前面改成s 然后wq保存，然后&amp;连接 git merge 合并git merge 分支名 // 合并某个分支到自己分支，和git rebase 不同，这个合并会多出来一条记录，不推荐使用，会使记录分叉不建议使用 git merge --abort 合并出现问题可以后退 git + 小乌龟让你体验更爽git 下载地址： 官方： https://git-scm.com/ 电脑管家： https://pc.qq.com/search.html#!keyword=git 小乌龟：TortoiseGit 官网： https://tortoisegit.org/download/ 电脑管家： https://pc.qq.com/search.html#!keyword=TortoiseGit 中文包也一起下载，如果英文好的可以使用英文 git 提交记录规范我公司： Mod: 修改使用 Fix: 修复使用 Add: 新增使用 Del: 删除使用 // 注意首字母大写，冒号英文后面有一个空格，内容要简洁，提交记录基本上以一个功能或者一个页面提交，中间写英文的话记得单词前后加一个空格 网上的说法： feat：添加新功能（feature） fix：改bug docs： 修改文档（documentation） style： 只改样式（不影响代码运行的变动） refactor：重构（即不是新增功能，也不是改bug的代码变动） perf : 代码优化（提升代码性能） test：增加测试 chore：构建过程或辅助工具的变动 git push 后续操作在git管理库进行pr申请，申请要合并到的分支，一般自己只推自己分支，如果自己的分支没有冲突，主管或者项目组长就会在线上自动合并，如果有冲突，或者代码不规范就会打回来，你需要修改后重新申请合并 如果有冲突，一种是你拉取要合并的分支，然后你合并另外一个分支，冲突解决后再推到你的分支，然后申请pr合并，这样应该就没冲突了，另外一种就是你主管或者组长拉你分支，然后合并后传到主分支，那么在他合并后你记得拉他的分支然后和自己的分支合并，这样你们的记录就合并到一起了，记得用 rebase 合并。 git 当前使用命令 -h 查看当前命令的所有用法 git 当前使用命令 --help 跳转网页查看命令 强推 git push origin -f 这个时候会覆盖线上所有代码，一般只会在合并好代码，记录改动了，或者git rebase 修改以往记录的时候才会用到 强拉 git reset --hard origin/线上分支名 如果远程分支被强推了，就要强拉才能下来 删除远程分支： it push origin --delete [branch_name] 分支起名： 主分支： master (一般用作生产环境) 开发分支： dev (最终测试人员测试使用的环境) 个人开发分支： 如果是修改，前面加 amend/ ,如果是上线之后修复 bug ，前面加fix/ git 重命名文件，如果只是改名，是不能把最新名字的文件推到线上的，这个时候可以把文件删掉，重新把新的推上去： 1、小乌龟手动删除再推 2、命令操作，git add new_file_name(添加新文件), git rm file_name (删除旧文件)","categories":[{"name":"git","slug":"git","permalink":"http://iqqian.com/categories/git/"}],"tags":[{"name":"git","slug":"git","permalink":"http://iqqian.com/tags/git/"}]},{"title":"12 个实用的前端开发技巧","slug":"前端方法","date":"2020-05-22T08:26:03.000Z","updated":"2021-12-16T07:03:02.507Z","comments":true,"path":"2020/05/22/前端方法/","link":"","permalink":"http://iqqian.com/2020/05/22/%E5%89%8D%E7%AB%AF%E6%96%B9%E6%B3%95/","excerpt":"","text":"1. 利用 CSS 穿透覆盖默认样式常见发生场景：假如我们需要通过 input，type=”file”来上传文件，而这个 input 的默认样式，可以说是非常地丑。所以我们希望通过一张图片，与这个 input 大小一样，位置一致地盖在上面。这个时候，显然，这个时候点击图片，input 是不会起作用的。就是因为 img 隔绝了 click 的穿透，而我们希望的是，这个 img 只是视觉上遮挡了 input 的样式，但是点击的时候还是点击到 input。所以，只要让 img 可穿透即可。 css 代码如下： img &amp;#123; pointer-events: none; &amp;#125; 2. 实现自定义原生 select 控件的样式由于 select 移动端原生样式很丑，但是原生弹出效果是符合我们设计的原则。直接修改 select 的样式的时候，一个奇怪的现象出现了，在 chrome 上调试的时候，自己定义的样式起了作用，在 Android 手机上也起了作用，但是到了 ios 手机上就不行了，典型的不兼容问题，这个时候禁用原生的样式即可。 css 代码如下： select &amp;#123; -webkit-appearance: none; &amp;#125; 3. 文本溢出处理移动设备相对来说页面较小，很多时候显示的一些信息都需要省略部分。最常见的是单行标题溢出省略，多行详情介绍溢出省略。现在都用框架开发了，这种建议需求建议形成一个基础组件，方便快捷。 css 代码如下： //单行 .single &amp;#123; overflow: hidden; white-space: nowrap; text-overflow: ellipsis; &amp;#125; //多行 .more &amp;#123; display: -webkit-box !important; overflow: hidden; text-overflow: ellipsis; work-break: break-all; -webkit-box-orient: vertical; -webkit-line-clamp: 2; //指定行数 &amp;#125; 4. 开启弹性滚动css 代码如下： body &amp;#123; overflow: scroll; -webkit-overflow-scrolling: touch; &amp;#125; 注意：Android 不支持一像素边框设置原生的弹性滚动，但可以借助第三方库 iScroll 来实现。 5. 一像素边框设置很多时候，想保持边框的大小在任何设置上都是 1px，但是因为 1px 使用 2dp 渲染，也就是说会显示为 2px 大小。所以，要采用 css3 缩放一下。 css 代码如下： .folder li &amp;#123; position: relative; padding: 5px; &amp;#125; .folder li + li:before &amp;#123; position: absolute; top: -1px; left: 0; content: &quot; &quot;; width: 100%; height: 1px; border-top: 1px solid #ccc; -webkit-transform: scaleY(0.5); &amp;#125; 6. 防止鼠标选中事件&lt;div class=&quot;mask&quot; onselectstart=&quot;return false&quot;&gt;&lt;/div&gt; &lt;div class=&quot;link&quot;&gt; &lt;a href=&quot;javascrip;;&quot;&gt;登录&lt;/a&gt; &lt;/div&gt; 给元素添加了onslectstart=&quot;return false&quot;,就可以防止鼠标选中事件。 7. 给动态添加的元素绑定事件利用事件代理达到这个效果即可。如： $(document).on(&quot;click&quot;, &quot;.large&quot;, slide); //jq中的写法 //第一个参数表示的是对应事件，第二个是需要绑定事件的元素的id或class，第三个是绑定的对应的事件函数名 8. 兼容 IE 浏览器的透明度处理.ui &amp;#123; width: 100%; height: 100%; opacity: 0.4; filter: Alpha(opacity=40); //兼容IE浏览器的处理 &amp;#125; 9. 常用的全屏居中 JS 函数//获取元素 function getElement(ele) &amp;#123; return document.getElementById(ele); &amp;#125; //自动居中函数 function autoCenter(el) &amp;#123; var bodyX = document.documentElement.offsetWidth || document.body.offsetWidth; var bodyY = document.documentElement.offsetHeight || document.body.offsetHeight; var elementX = el.offsetWidth; var elementY = el.offsetHeight; el.style.left = (bodyX - elementX) / 2 + &quot;px&quot;; el.style.top = (bodyY - elementY) / 2 + &quot;px&quot;; &amp;#125; 10. 常用的全屏居中 CSS 函数body &amp;#123; height: 100vh; text-align: center; line-height: 100vh; &amp;#125; 11. 在输入框输入完内容并按回车的时候进行判断比如说输入完 11000 在按下回车的时候。 &lt;input type=&quot;textbox&quot; id=&quot;textbox1&quot; onkeypress=&quot;CheckInfo&quot; /&gt; &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt; function CheckInfo() &amp;#123; if (event.keyCode==13) &amp;#123; alert(textbox1.text); &amp;#125; &amp;#125; &lt;/script&gt; 12. chrome 调试快捷键① ctrl+shift+f 全文查找 ② ctrl+o 查找文件名 ③ ctrl+shift+o 查找 js 函数名","categories":[{"name":"前端","slug":"前端","permalink":"http://iqqian.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"css","slug":"前端/css","permalink":"http://iqqian.com/categories/%E5%89%8D%E7%AB%AF/css/"}],"tags":[{"name":"css","slug":"css","permalink":"http://iqqian.com/tags/css/"},{"name":"前端","slug":"前端","permalink":"http://iqqian.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"开发技巧","slug":"开发技巧","permalink":"http://iqqian.com/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"}]},{"title":"前端常用60余种工具方法","slug":"工具方法","date":"2020-05-22T08:26:03.000Z","updated":"2021-12-16T07:03:02.507Z","comments":true,"path":"2020/05/22/工具方法/","link":"","permalink":"http://iqqian.com/2020/05/22/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/","excerpt":"","text":"邮箱export const isEmail = (s) =&gt; &amp;#123; return /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&amp;#123;2,3&amp;#125;)&amp;#123;1,2&amp;#125;)$/.test(s) &amp;#125; 手机号码export const isMobile = (s) =&gt; &amp;#123; return /^1[0-9]&amp;#123;10&amp;#125;$/.test(s) &amp;#125; 电话号码export const isPhone = (s) =&gt; &amp;#123; return /^([0-9]&amp;#123;3,4&amp;#125;-)?[0-9]&amp;#123;7,8&amp;#125;$/.test(s) &amp;#125; 是否url地址export const isURL = (s) =&gt; &amp;#123; return /^http[s]?:\\/\\/.*/.test(s) &amp;#125; 是否字符串export const isString = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;String&#39; &amp;#125; 是否数字export const isNumber = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Number&#39; &amp;#125; 是否booleanexport const isBoolean = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Boolean&#39; &amp;#125; 是否函数export const isFunction = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Function&#39; &amp;#125; 是否nullexport const isNull = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Null&#39; &amp;#125; 是否undefinedexport const isUndefined = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Undefined&#39; &amp;#125; 是否对象export const isObj = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Object&#39; &amp;#125; 是否数组export const isArray = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Array&#39; &amp;#125; 是否时间export const isDate = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Date&#39; &amp;#125; 是否正则export const isRegExp = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;RegExp&#39; &amp;#125; 是否错误对象export const isError = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Error&#39; &amp;#125; 是否Symbol函数export const isSymbol = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Symbol&#39; &amp;#125; 是否Promise对象export const isPromise = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Promise&#39; &amp;#125; 是否Set对象export const isSet = (o) =&gt; &amp;#123; return Object.prototype.toString.call(o).slice(8, -1) === &#39;Set&#39; &amp;#125; export const ua = navigator.userAgent.toLowerCase(); 是否是微信浏览器export const isWeiXin = () =&gt; &amp;#123; return ua.match(/microMessenger/i) == &#39;micromessenger&#39; &amp;#125; 是否是移动端export const isDeviceMobile = () =&gt; &amp;#123; return /android|webos|iphone|ipod|balckberry/i.test(ua) &amp;#125; 是否是QQ浏览器export const isQQBrowser = () =&gt; &amp;#123; return !!ua.match(/mqqbrowser|qzone|qqbrowser|qbwebviewtype/i) &amp;#125; 是否是爬虫export const isSpider = () =&gt; &amp;#123; return /adsbot|googlebot|bingbot|msnbot|yandexbot|baidubot|robot|careerbot|seznambot|bot|baiduspider|jikespider|symantecspider|scannerlwebcrawler|crawler|360spider|sosospider|sogou web sprider|sogou orion spider/.test(ua) &amp;#125; 是否iosexport const isIos = () =&gt; &amp;#123; var u = navigator.userAgent; if (u.indexOf(&#39;Android&#39;) &gt; -1 || u.indexOf(&#39;Linux&#39;) &gt; -1) &amp;#123; //安卓手机 return false &amp;#125; else if (u.indexOf(&#39;iPhone&#39;) &gt; -1) &amp;#123;//苹果手机 return true &amp;#125; else if (u.indexOf(&#39;iPad&#39;) &gt; -1) &amp;#123;//iPad return false &amp;#125; else if (u.indexOf(&#39;Windows Phone&#39;) &gt; -1) &amp;#123;//winphone手机 return false &amp;#125; else &amp;#123; return false &amp;#125; &amp;#125; 是否为PC端export const isPC = () =&gt; &amp;#123; var userAgentInfo = navigator.userAgent; var Agents = [&quot;Android&quot;, &quot;iPhone&quot;, &quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPad&quot;, &quot;iPod&quot;]; var flag = true; for (var v = 0; v &lt; Agents.length; v++) &amp;#123; if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &amp;#123; flag = false; break; &amp;#125; &amp;#125; return flag; &amp;#125; 去除html标签export const removeHtmltag = (str) =&gt; &amp;#123; return str.replace(/&lt;[^&gt;]+&gt;/g, &#39;&#39;) &amp;#125; 获取url参数export const getQueryString = (name) =&gt; &amp;#123; const reg = new RegExp(&#39;(^|&amp;)&#39; + name + &#39;=([^&amp;]*)(&amp;|$)&#39;, &#39;i&#39;); const search = window.location.search.split(&#39;?&#39;)[1] || &#39;&#39;; const r = search.match(reg) || []; return r[2]; &amp;#125; 动态引入jsexport const injectScript = (src) =&gt; &amp;#123; const s = document.createElement(&#39;script&#39;); s.type = &#39;text/javascript&#39;; s.async = true; s.src = src; const t = document.getElementsByTagName(&#39;script&#39;)[0]; t.parentNode.insertBefore(s, t); &amp;#125; 根据url地址下载export const download = (url) =&gt; &amp;#123; var isChrome = navigator.userAgent.toLowerCase().indexOf(&#39;chrome&#39;) &gt; -1; var isSafari = navigator.userAgent.toLowerCase().indexOf(&#39;safari&#39;) &gt; -1; if (isChrome || isSafari) &amp;#123; var link = document.createElement(&#39;a&#39;); link.href = url; if (link.download !== undefined) &amp;#123; var fileName = url.substring(url.lastIndexOf(&#39;/&#39;) + 1, url.length); link.download = fileName; &amp;#125; if (document.createEvent) &amp;#123; var e = document.createEvent(&#39;MouseEvents&#39;); e.initEvent(&#39;click&#39;, true, true); link.dispatchEvent(e); return true; &amp;#125; &amp;#125; if (url.indexOf(&#39;?&#39;) === -1) &amp;#123; url += &#39;?download&#39;; &amp;#125; window.open(url, &#39;_self&#39;); return true; &amp;#125; el是否包含某个classexport const hasClass = (el, className) =&gt; &amp;#123; let reg = new RegExp(&#39;(^|\\\\s)&#39; + className + &#39;(\\\\s|$)&#39;) return reg.test(el.className) &amp;#125; el添加某个classexport const addClass = (el, className) =&gt; &amp;#123; if (hasClass(el, className)) &amp;#123; return &amp;#125; let newClass = el.className.split(&#39; &#39;) newClass.push(className) el.className = newClass.join(&#39; &#39;) &amp;#125; el去除某个classexport const removeClass = (el, className) =&gt; &amp;#123; if (!hasClass(el, className)) &amp;#123; return &amp;#125; let reg = new RegExp(&#39;(^|\\\\s)&#39; + className + &#39;(\\\\s|$)&#39;, &#39;g&#39;) el.className = el.className.replace(reg, &#39; &#39;) &amp;#125; 获取滚动的坐标export const getScrollPosition = (el = window) =&gt; (&amp;#123; x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft, y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop &amp;#125;); 滚动到顶部export const scrollToTop = () =&gt; &amp;#123; const c = document.documentElement.scrollTop || document.body.scrollTop; if (c &gt; 0) &amp;#123; window.requestAnimationFrame(scrollToTop); window.scrollTo(0, c - c / 8); &amp;#125; &amp;#125; el是否在视口范围内export const elementIsVisibleInViewport = (el, partiallyVisible = false) =&gt; &amp;#123; const &amp;#123; top, left, bottom, right &amp;#125; = el.getBoundingClientRect(); const &amp;#123; innerHeight, innerWidth &amp;#125; = window; return partiallyVisible ? ((top &gt; 0 &amp;&amp; top &lt; innerHeight) || (bottom &gt; 0 &amp;&amp; bottom &lt; innerHeight)) &amp;&amp; ((left &gt; 0 &amp;&amp; left &lt; innerWidth) || (right &gt; 0 &amp;&amp; right &lt; innerWidth)) : top &gt;= 0 &amp;&amp; left &gt;= 0 &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth; &amp;#125; 洗牌算法随机export const shuffle = (arr) =&gt; &amp;#123; var result = [], random; while (arr.length &gt; 0) &amp;#123; random = Math.floor(Math.random() * arr.length); result.push(arr[random]) arr.splice(random, 1) &amp;#125; return result; &amp;#125; 拦截粘贴板export const copyTextToClipboard = (value) =&gt; &amp;#123; var textArea = document.createElement(&quot;textarea&quot;); textArea.style.background = &#39;transparent&#39;; textArea.value = value; document.body.appendChild(textArea); textArea.select(); try &amp;#123; var successful = document.execCommand(&#39;copy&#39;); &amp;#125; catch (err) &amp;#123; console.log(&#39;Oops, unable to copy&#39;); &amp;#125; document.body.removeChild(textArea); &amp;#125; 判断类型集合export const checkStr = (str, type) =&gt; &amp;#123; switch (type) &amp;#123; case &#39;phone&#39;: //手机号码 return /^1[3|4|5|6|7|8|9][0-9]&amp;#123;9&amp;#125;$/.test(str); case &#39;tel&#39;: //座机 return /^(0\\d&amp;#123;2,3&amp;#125;-\\d&amp;#123;7,8&amp;#125;)(-\\d&amp;#123;1,4&amp;#125;)?$/.test(str); case &#39;card&#39;: //身份证 return /(^\\d&amp;#123;15&amp;#125;$)|(^\\d&amp;#123;18&amp;#125;$)|(^\\d&amp;#123;17&amp;#125;(\\d|X|x)$)/.test(str); case &#39;pwd&#39;: //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线 return /^[a-zA-Z]\\w&amp;#123;5,17&amp;#125;$/.test(str) case &#39;postal&#39;: //邮政编码 return /[1-9]\\d&amp;#123;5&amp;#125;(?!\\d)/.test(str); case &#39;QQ&#39;: //QQ号 return /^[1-9][0-9]&amp;#123;4,9&amp;#125;$/.test(str); case &#39;email&#39;: //邮箱 return /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/.test(str); case &#39;money&#39;: //金额(小数点2位) return /^\\d*(?:\\.\\d&amp;#123;0,2&amp;#125;)?$/.test(str); case &#39;URL&#39;: //网址 return /(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?/.test(str) case &#39;IP&#39;: //IP return /((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&amp;#123;3&amp;#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))/.test(str); case &#39;date&#39;: //日期时间 return /^(\\d&amp;#123;4&amp;#125;)\\-(\\d&amp;#123;2&amp;#125;)\\-(\\d&amp;#123;2&amp;#125;) (\\d&amp;#123;2&amp;#125;)(?:\\:\\d&amp;#123;2&amp;#125;|:(\\d&amp;#123;2&amp;#125;):(\\d&amp;#123;2&amp;#125;))$/.test(str) || /^(\\d&amp;#123;4&amp;#125;)\\-(\\d&amp;#123;2&amp;#125;)\\-(\\d&amp;#123;2&amp;#125;)$/.test(str) case &#39;number&#39;: //数字 return /^[0-9]$/.test(str); case &#39;english&#39;: //英文 return /^[a-zA-Z]+$/.test(str); case &#39;chinese&#39;: //中文 return /^[\\\\u4E00-\\\\u9FA5]+$/.test(str); case &#39;lower&#39;: //小写 return /^[a-z]+$/.test(str); case &#39;upper&#39;: //大写 return /^[A-Z]+$/.test(str); case &#39;HTML&#39;: //HTML标记 return /&lt;(&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&#39;&quot;&gt;])*&gt;/.test(str); default: return true; &amp;#125; &amp;#125; 严格的身份证校验export const isCardID = (sId) =&gt; &amp;#123; if (!/(^\\d&amp;#123;15&amp;#125;$)|(^\\d&amp;#123;17&amp;#125;(\\d|X|x)$)/.test(sId)) &amp;#123; console.log(&#39;你输入的身份证长度或格式错误&#39;) return false &amp;#125; //身份证城市 var aCity = &amp;#123; 11: &quot;北京&quot;, 12: &quot;天津&quot;, 13: &quot;河北&quot;, 14: &quot;山西&quot;, 15: &quot;内蒙古&quot;, 21: &quot;辽宁&quot;, 22: &quot;吉林&quot;, 23: &quot;黑龙江&quot;, 31: &quot;上海&quot;, 32: &quot;江苏&quot;, 33: &quot;浙江&quot;, 34: &quot;安徽&quot;, 35: &quot;福建&quot;, 36: &quot;江西&quot;, 37: &quot;山东&quot;, 41: &quot;河南&quot;, 42: &quot;湖北&quot;, 43: &quot;湖南&quot;, 44: &quot;广东&quot;, 45: &quot;广西&quot;, 46: &quot;海南&quot;, 50: &quot;重庆&quot;, 51: &quot;四川&quot;, 52: &quot;贵州&quot;, 53: &quot;云南&quot;, 54: &quot;西藏&quot;, 61: &quot;陕西&quot;, 62: &quot;甘肃&quot;, 63: &quot;青海&quot;, 64: &quot;宁夏&quot;, 65: &quot;新疆&quot;, 71: &quot;台湾&quot;, 81: &quot;香港&quot;, 82: &quot;澳门&quot;, 91: &quot;国外&quot; &amp;#125;; if (!aCity[parseInt(sId.substr(0, 2))]) &amp;#123; console.log(&#39;你的身份证地区非法&#39;) return false &amp;#125; // 出生日期验证 var sBirthday = (sId.substr(6, 4) + &quot;-&quot; + Number(sId.substr(10, 2)) + &quot;-&quot; + Number(sId.substr(12, 2))).replace(/-/g, &quot;/&quot;), d = new Date(sBirthday) if (sBirthday != (d.getFullYear() + &quot;/&quot; + (d.getMonth() + 1) + &quot;/&quot; + d.getDate())) &amp;#123; console.log(&#39;身份证上的出生日期非法&#39;) return false &amp;#125; // 身份证号码校验 var sum = 0, weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2], codes = &quot;10X98765432&quot; for (var i = 0; i &lt; sId.length - 1; i++) &amp;#123; sum += sId[i] * weights[i]; &amp;#125; var last = codes[sum % 11]; //计算出来的最后一位身份证号码 if (sId[sId.length - 1] != last) &amp;#123; console.log(&#39;你输入的身份证号非法&#39;) return false &amp;#125; return true &amp;#125; 随机数范围export const random = (min, max) =&gt; &amp;#123; if (arguments.length === 2) &amp;#123; return Math.floor(min + Math.random() * ((max + 1) - min)) &amp;#125; else &amp;#123; return null; &amp;#125; &amp;#125; 将阿拉伯数字翻译成中文的大写数字export const numberToChinese = (num) =&gt; &amp;#123; var AA = new Array(&quot;零&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;, &quot;七&quot;, &quot;八&quot;, &quot;九&quot;, &quot;十&quot;); var BB = new Array(&quot;&quot;, &quot;十&quot;, &quot;百&quot;, &quot;仟&quot;, &quot;萬&quot;, &quot;億&quot;, &quot;点&quot;, &quot;&quot;); var a = (&quot;&quot; + num).replace(/(^0*)/g, &quot;&quot;).split(&quot;.&quot;), k = 0, re = &quot;&quot;; for (var i = a[0].length - 1; i &gt;= 0; i--) &amp;#123; switch (k) &amp;#123; case 0: re = BB[7] + re; break; case 4: if (!new RegExp(&quot;0&amp;#123;4&amp;#125;//d&amp;#123;&quot; + (a[0].length - i - 1) + &quot;&amp;#125;$&quot;) .test(a[0])) re = BB[4] + re; break; case 8: re = BB[5] + re; BB[7] = BB[5]; k = 0; break; &amp;#125; if (k % 4 == 2 &amp;&amp; a[0].charAt(i + 2) != 0 &amp;&amp; a[0].charAt(i + 1) == 0) re = AA[0] + re; if (a[0].charAt(i) != 0) re = AA[a[0].charAt(i)] + BB[k % 4] + re; k++; &amp;#125; if (a.length &gt; 1) // 加上小数部分(如果有小数部分) &amp;#123; re += BB[6]; for (var i = 0; i &lt; a[1].length; i++) re += AA[a[1].charAt(i)]; &amp;#125; if (re == &#39;一十&#39;) re = &quot;十&quot;; if (re.match(/^一/) &amp;&amp; re.length == 3) re = re.replace(&quot;一&quot;, &quot;&quot;); return re; &amp;#125; 将数字转换为大写金额export const changeToChinese = (Num) =&gt; &amp;#123; //判断如果传递进来的不是字符的话转换为字符 if (typeof Num == &quot;number&quot;) &amp;#123; Num = new String(Num); &amp;#125;; Num = Num.replace(/,/g, &quot;&quot;) //替换tomoney()中的“,” Num = Num.replace(/ /g, &quot;&quot;) //替换tomoney()中的空格 Num = Num.replace(/￥/g, &quot;&quot;) //替换掉可能出现的￥字符 if (isNaN(Num)) &amp;#123; //验证输入的字符是否为数字 //alert(&quot;请检查小写金额是否正确&quot;); return &quot;&quot;; &amp;#125;; //字符处理完毕后开始转换，采用前后两部分分别转换 var part = String(Num).split(&quot;.&quot;); var newchar = &quot;&quot;; //小数点前进行转化 for (var i = part[0].length - 1; i &gt;= 0; i--) &amp;#123; if (part[0].length &gt; 10) &amp;#123; return &quot;&quot;; //若数量超过拾亿单位，提示 &amp;#125; var tmpnewchar = &quot;&quot; var perchar = part[0].charAt(i); switch (perchar) &amp;#123; case &quot;0&quot;: tmpnewchar = &quot;零&quot; + tmpnewchar; break; case &quot;1&quot;: tmpnewchar = &quot;壹&quot; + tmpnewchar; break; case &quot;2&quot;: tmpnewchar = &quot;贰&quot; + tmpnewchar; break; case &quot;3&quot;: tmpnewchar = &quot;叁&quot; + tmpnewchar; break; case &quot;4&quot;: tmpnewchar = &quot;肆&quot; + tmpnewchar; break; case &quot;5&quot;: tmpnewchar = &quot;伍&quot; + tmpnewchar; break; case &quot;6&quot;: tmpnewchar = &quot;陆&quot; + tmpnewchar; break; case &quot;7&quot;: tmpnewchar = &quot;柒&quot; + tmpnewchar; break; case &quot;8&quot;: tmpnewchar = &quot;捌&quot; + tmpnewchar; break; case &quot;9&quot;: tmpnewchar = &quot;玖&quot; + tmpnewchar; break; &amp;#125; switch (part[0].length - i - 1) &amp;#123; case 0: tmpnewchar = tmpnewchar + &quot;元&quot;; break; case 1: if (perchar != 0) tmpnewchar = tmpnewchar + &quot;拾&quot;; break; case 2: if (perchar != 0) tmpnewchar = tmpnewchar + &quot;佰&quot;; break; case 3: if (perchar != 0) tmpnewchar = tmpnewchar + &quot;仟&quot;; break; case 4: tmpnewchar = tmpnewchar + &quot;万&quot;; break; case 5: if (perchar != 0) tmpnewchar = tmpnewchar + &quot;拾&quot;; break; case 6: if (perchar != 0) tmpnewchar = tmpnewchar + &quot;佰&quot;; break; case 7: if (perchar != 0) tmpnewchar = tmpnewchar + &quot;仟&quot;; break; case 8: tmpnewchar = tmpnewchar + &quot;亿&quot;; break; case 9: tmpnewchar = tmpnewchar + &quot;拾&quot;; break; &amp;#125; var newchar = tmpnewchar + newchar; &amp;#125; //小数点之后进行转化 if (Num.indexOf(&quot;.&quot;) != -1) &amp;#123; if (part[1].length &gt; 2) &amp;#123; // alert(&quot;小数点之后只能保留两位,系统将自动截断&quot;); part[1] = part[1].substr(0, 2) &amp;#125; for (i = 0; i &lt; part[1].length; i++) &amp;#123; tmpnewchar = &quot;&quot; perchar = part[1].charAt(i) switch (perchar) &amp;#123; case &quot;0&quot;: tmpnewchar = &quot;零&quot; + tmpnewchar; break; case &quot;1&quot;: tmpnewchar = &quot;壹&quot; + tmpnewchar; break; case &quot;2&quot;: tmpnewchar = &quot;贰&quot; + tmpnewchar; break; case &quot;3&quot;: tmpnewchar = &quot;叁&quot; + tmpnewchar; break; case &quot;4&quot;: tmpnewchar = &quot;肆&quot; + tmpnewchar; break; case &quot;5&quot;: tmpnewchar = &quot;伍&quot; + tmpnewchar; break; case &quot;6&quot;: tmpnewchar = &quot;陆&quot; + tmpnewchar; break; case &quot;7&quot;: tmpnewchar = &quot;柒&quot; + tmpnewchar; break; case &quot;8&quot;: tmpnewchar = &quot;捌&quot; + tmpnewchar; break; case &quot;9&quot;: tmpnewchar = &quot;玖&quot; + tmpnewchar; break; &amp;#125; if (i == 0) tmpnewchar = tmpnewchar + &quot;角&quot;; if (i == 1) tmpnewchar = tmpnewchar + &quot;分&quot;; newchar = newchar + tmpnewchar; &amp;#125; &amp;#125; //替换所有无用汉字 while (newchar.search(&quot;零零&quot;) != -1) newchar = newchar.replace(&quot;零零&quot;, &quot;零&quot;); newchar = newchar.replace(&quot;零亿&quot;, &quot;亿&quot;); newchar = newchar.replace(&quot;亿万&quot;, &quot;亿&quot;); newchar = newchar.replace(&quot;零万&quot;, &quot;万&quot;); newchar = newchar.replace(&quot;零元&quot;, &quot;元&quot;); newchar = newchar.replace(&quot;零角&quot;, &quot;&quot;); newchar = newchar.replace(&quot;零分&quot;, &quot;&quot;); if (newchar.charAt(newchar.length - 1) == &quot;元&quot;) &amp;#123; newchar = newchar + &quot;整&quot; &amp;#125; return newchar; &amp;#125; 判断一个元素是否在数组中export const contains = (arr, val) =&gt; &amp;#123; return arr.indexOf(val) != -1 ? true : false; &amp;#125; 数组排序，&#123;type&#125; 1：从小到大 2：从大到小 3：随机export const sort = (arr, type = 1) =&gt; &amp;#123; return arr.sort((a, b) =&gt; &amp;#123; switch (type) &amp;#123; case 1: return a - b; case 2: return b - a; case 3: return Math.random() - 0.5; default: return arr; &amp;#125; &amp;#125;) &amp;#125; 去重export const unique = (arr) =&gt; &amp;#123; if (Array.hasOwnProperty(&#39;from&#39;)) &amp;#123; return Array.from(new Set(arr)); &amp;#125; else &amp;#123; var n = &amp;#123;&amp;#125;, r = []; for (var i = 0; i &lt; arr.length; i++) &amp;#123; if (!n[arr[i]]) &amp;#123; n[arr[i]] = true; r.push(arr[i]); &amp;#125; &amp;#125; return r; &amp;#125; &amp;#125; 求两个集合的并集export const union = (a, b) =&gt; &amp;#123; var newArr = a.concat(b); return this.unique(newArr); &amp;#125; 求两个集合的交集export const intersect = (a, b) =&gt; &amp;#123; var _this = this; a = this.unique(a); return this.map(a, function (o) &amp;#123; return _this.contains(b, o) ? o : null; &amp;#125;); &amp;#125; 删除其中一个元素export const remove = (arr, ele) =&gt; &amp;#123; var index = arr.indexOf(ele); if (index &gt; -1) &amp;#123; arr.splice(index, 1); &amp;#125; return arr; &amp;#125; 将类数组转换为数组export const formArray = (ary) =&gt; &amp;#123; var arr = []; if (Array.isArray(ary)) &amp;#123; arr = ary; &amp;#125; else &amp;#123; arr = Array.prototype.slice.call(ary); &amp;#125;; return arr; &amp;#125; 最大值export const max = (arr) =&gt; &amp;#123; return Math.max.apply(null, arr); &amp;#125; 最小值export const min = (arr) =&gt; &amp;#123; return Math.min.apply(null, arr); &amp;#125; 求和export const sum = (arr) =&gt; &amp;#123; return arr.reduce((pre, cur) =&gt; &amp;#123; return pre + cur &amp;#125;) &amp;#125; 平均值export const average = (arr) =&gt; &amp;#123; return this.sum(arr) / arr.length &amp;#125; 去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格export const trim = (str, type) =&gt; &amp;#123; type = type || 1 switch (type) &amp;#123; case 1: return str.replace(/\\s+/g, &quot;&quot;); case 2: return str.replace(/(^\\s*)|(\\s*$)/g, &quot;&quot;); case 3: return str.replace(/(^\\s*)/g, &quot;&quot;); case 4: return str.replace(/(\\s*$)/g, &quot;&quot;); default: return str; &amp;#125; &amp;#125; 字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写export const changeCase = (str, type) =&gt; &amp;#123; type = type || 4 switch (type) &amp;#123; case 1: return str.replace(/\\b\\w+\\b/g, function (word) &amp;#123; return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase(); &amp;#125;); case 2: return str.replace(/\\b\\w+\\b/g, function (word) &amp;#123; return word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase(); &amp;#125;); case 3: return str.split(&#39;&#39;).map(function (word) &amp;#123; if (/[a-z]/.test(word)) &amp;#123; return word.toUpperCase(); &amp;#125; else &amp;#123; return word.toLowerCase() &amp;#125; &amp;#125;).join(&#39;&#39;) case 4: return str.toUpperCase(); case 5: return str.toLowerCase(); default: return str; &amp;#125; &amp;#125; 检测密码强度export const checkPwd = (str) =&gt; &amp;#123; var Lv = 0; if (str.length &lt; 6) &amp;#123; return Lv &amp;#125; if (/[0-9]/.test(str)) &amp;#123; Lv++ &amp;#125; if (/[a-z]/.test(str)) &amp;#123; Lv++ &amp;#125; if (/[A-Z]/.test(str)) &amp;#123; Lv++ &amp;#125; if (/[\\.|-|_]/.test(str)) &amp;#123; Lv++ &amp;#125; return Lv; &amp;#125; 函数节流器export const debouncer = (fn, time, interval = 200) =&gt; &amp;#123; if (time - (window.debounceTimestamp || 0) &gt; interval) &amp;#123; fn &amp;&amp; fn(); window.debounceTimestamp = time; &amp;#125; &amp;#125; 在字符串中插入新字符串export const insertStr = (soure, index, newStr) =&gt; &amp;#123; var str = soure.slice(0, index) + newStr + soure.slice(index); return str; &amp;#125; 判断两个对象是否键值相同export const isObjectEqual = (a, b) =&gt; &amp;#123; var aProps = Object.getOwnPropertyNames(a); var bProps = Object.getOwnPropertyNames(b); if (aProps.length !== bProps.length) &amp;#123; return false; &amp;#125; for (var i = 0; i &lt; aProps.length; i++) &amp;#123; var propName = aProps[i]; if (a[propName] !== b[propName]) &amp;#123; return false; &amp;#125; &amp;#125; return true; &amp;#125; 16进制颜色转RGBRGBA字符串export const colorToRGB = (val, opa) =&gt; &amp;#123; var pattern = /^(#?)[a-fA-F0-9]&amp;#123;6&amp;#125;$/; //16进制颜色值校验规则 var isOpa = typeof opa == &#39;number&#39;; //判断是否有设置不透明度 if (!pattern.test(val)) &amp;#123; //如果值不符合规则返回空字符 return &#39;&#39;; &amp;#125; var v = val.replace(/#/, &#39;&#39;); //如果有#号先去除#号 var rgbArr = []; var rgbStr = &#39;&#39;; for (var i = 0; i &lt; 3; i++) &amp;#123; var item = v.substring(i * 2, i * 2 + 2); var num = parseInt(item, 16); rgbArr.push(num); &amp;#125; rgbStr = rgbArr.join(); rgbStr = &#39;rgb&#39; + (isOpa ? &#39;a&#39; : &#39;&#39;) + &#39;(&#39; + rgbStr + (isOpa ? &#39;,&#39; + opa : &#39;&#39;) + &#39;)&#39;; return rgbStr; &amp;#125; 追加url参数export const appendQuery = (url, key, value) =&gt; &amp;#123; var options = key; if (typeof options == &#39;string&#39;) &amp;#123; options = &amp;#123;&amp;#125;; options[key] = value; &amp;#125; options = $.param(options); if (url.includes(&#39;?&#39;)) &amp;#123; url += &#39;&amp;&#39; + options &amp;#125; else &amp;#123; url += &#39;?&#39; + options &amp;#125; return url; &amp;#125; 欢迎指正","categories":[{"name":"工具方法","slug":"工具方法","permalink":"http://iqqian.com/categories/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"},{"name":"js","slug":"工具方法/js","permalink":"http://iqqian.com/categories/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/js/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://iqqian.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://iqqian.com/tags/JavaScript/"}]}],"categories":[{"name":"css","slug":"css","permalink":"http://iqqian.com/categories/css/"},{"name":"js","slug":"js","permalink":"http://iqqian.com/categories/js/"},{"name":"es6","slug":"js/es6","permalink":"http://iqqian.com/categories/js/es6/"},{"name":"git","slug":"git","permalink":"http://iqqian.com/categories/git/"},{"name":"前端","slug":"前端","permalink":"http://iqqian.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"css","slug":"前端/css","permalink":"http://iqqian.com/categories/%E5%89%8D%E7%AB%AF/css/"},{"name":"工具方法","slug":"工具方法","permalink":"http://iqqian.com/categories/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"},{"name":"js","slug":"工具方法/js","permalink":"http://iqqian.com/categories/%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/js/"}],"tags":[{"name":"css","slug":"css","permalink":"http://iqqian.com/tags/css/"},{"name":"es6","slug":"es6","permalink":"http://iqqian.com/tags/es6/"},{"name":"前端","slug":"前端","permalink":"http://iqqian.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"js","slug":"js","permalink":"http://iqqian.com/tags/js/"},{"name":"git","slug":"git","permalink":"http://iqqian.com/tags/git/"},{"name":"开发技巧","slug":"开发技巧","permalink":"http://iqqian.com/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"},{"name":"JavaScript","slug":"JavaScript","permalink":"http://iqqian.com/tags/JavaScript/"}]}